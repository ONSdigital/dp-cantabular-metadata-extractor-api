// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/cantabular"
	"github.com/ONSdigital/dp-cantabular-metadata-extractor-api/api"
	"sync"
)

// Ensure, that CantMetaAPIMock does implement api.CantMetaAPI.
// If this is not the case, regenerate this file with moq.
var _ api.CantMetaAPI = &CantMetaAPIMock{}

// CantMetaAPIMock is a mock implementation of api.CantMetaAPI.
//
// 	func TestSomethingThatUsesCantMetaAPI(t *testing.T) {
//
// 		// make and configure a mocked api.CantMetaAPI
// 		mockedCantMetaAPI := &CantMetaAPIMock{
// 			MetadataDatasetQueryFunc: func(ctx context.Context, req cantabular.MetadataDatasetQueryRequest) (*cantabular.MetadataDatasetQuery, error) {
// 				panic("mock out the MetadataDatasetQuery method")
// 			},
// 			MetadataTableQueryFunc: func(ctx context.Context, req cantabular.MetadataTableQueryRequest) (*cantabular.MetadataTableQuery, error) {
// 				panic("mock out the MetadataTableQuery method")
// 			},
// 		}
//
// 		// use mockedCantMetaAPI in code that requires api.CantMetaAPI
// 		// and then make assertions.
//
// 	}
type CantMetaAPIMock struct {
	// MetadataDatasetQueryFunc mocks the MetadataDatasetQuery method.
	MetadataDatasetQueryFunc func(ctx context.Context, req cantabular.MetadataDatasetQueryRequest) (*cantabular.MetadataDatasetQuery, error)

	// MetadataTableQueryFunc mocks the MetadataTableQuery method.
	MetadataTableQueryFunc func(ctx context.Context, req cantabular.MetadataTableQueryRequest) (*cantabular.MetadataTableQuery, error)

	// calls tracks calls to the methods.
	calls struct {
		// MetadataDatasetQuery holds details about calls to the MetadataDatasetQuery method.
		MetadataDatasetQuery []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req cantabular.MetadataDatasetQueryRequest
		}
		// MetadataTableQuery holds details about calls to the MetadataTableQuery method.
		MetadataTableQuery []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req cantabular.MetadataTableQueryRequest
		}
	}
	lockMetadataDatasetQuery sync.RWMutex
	lockMetadataTableQuery   sync.RWMutex
}

// MetadataDatasetQuery calls MetadataDatasetQueryFunc.
func (mock *CantMetaAPIMock) MetadataDatasetQuery(ctx context.Context, req cantabular.MetadataDatasetQueryRequest) (*cantabular.MetadataDatasetQuery, error) {
	if mock.MetadataDatasetQueryFunc == nil {
		panic("CantMetaAPIMock.MetadataDatasetQueryFunc: method is nil but CantMetaAPI.MetadataDatasetQuery was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req cantabular.MetadataDatasetQueryRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockMetadataDatasetQuery.Lock()
	mock.calls.MetadataDatasetQuery = append(mock.calls.MetadataDatasetQuery, callInfo)
	mock.lockMetadataDatasetQuery.Unlock()
	return mock.MetadataDatasetQueryFunc(ctx, req)
}

// MetadataDatasetQueryCalls gets all the calls that were made to MetadataDatasetQuery.
// Check the length with:
//     len(mockedCantMetaAPI.MetadataDatasetQueryCalls())
func (mock *CantMetaAPIMock) MetadataDatasetQueryCalls() []struct {
	Ctx context.Context
	Req cantabular.MetadataDatasetQueryRequest
} {
	var calls []struct {
		Ctx context.Context
		Req cantabular.MetadataDatasetQueryRequest
	}
	mock.lockMetadataDatasetQuery.RLock()
	calls = mock.calls.MetadataDatasetQuery
	mock.lockMetadataDatasetQuery.RUnlock()
	return calls
}

// MetadataTableQuery calls MetadataTableQueryFunc.
func (mock *CantMetaAPIMock) MetadataTableQuery(ctx context.Context, req cantabular.MetadataTableQueryRequest) (*cantabular.MetadataTableQuery, error) {
	if mock.MetadataTableQueryFunc == nil {
		panic("CantMetaAPIMock.MetadataTableQueryFunc: method is nil but CantMetaAPI.MetadataTableQuery was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req cantabular.MetadataTableQueryRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockMetadataTableQuery.Lock()
	mock.calls.MetadataTableQuery = append(mock.calls.MetadataTableQuery, callInfo)
	mock.lockMetadataTableQuery.Unlock()
	return mock.MetadataTableQueryFunc(ctx, req)
}

// MetadataTableQueryCalls gets all the calls that were made to MetadataTableQuery.
// Check the length with:
//     len(mockedCantMetaAPI.MetadataTableQueryCalls())
func (mock *CantMetaAPIMock) MetadataTableQueryCalls() []struct {
	Ctx context.Context
	Req cantabular.MetadataTableQueryRequest
} {
	var calls []struct {
		Ctx context.Context
		Req cantabular.MetadataTableQueryRequest
	}
	mock.lockMetadataTableQuery.RLock()
	calls = mock.calls.MetadataTableQuery
	mock.lockMetadataTableQuery.RUnlock()
	return calls
}
